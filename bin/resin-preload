#!/usr/bin/env node
const info = require('../package.json')

const USAGE = `
  Usage: ${info.name} [options]

  Options:

    --app          Application ID (required)
    --img          Disk image to preload into (required)
    --api-token    API token (required, or api-key)
    --api-key      API key (required, or api-token)
    --api-host     API host (default: "https://api.resin.io")
    --registry     Image registry host (default: "registry.resin.io")

    --help, -h     Display ${info.name} usage
    --version, -v  Display ${info.name} version

  Environment variables:

    The following option flags can also be set
    via the corresponding environment variables:

    --app          APP_ID
    --img          IMAGE
    --api-token    API_TOKEN
    --api-key      API_KEY
    --api-host     API_HOST
    --registry     REGISTRY_HOST

  Example:

    ${info.name} --app 123456 --api-token \"xxxx...\" --img /path/to/resin-os.img
`

function inspect( value ) {
  return require('util').inspect( value, {
    colors: process.stdout.isTTY
  })
}

function showError( error, details, report ) {

  let message = !details ?
    `\n[ERROR] ${error.message}` :
    `\n${inspect(error)}`

  if(report) {
    message += '\n\n'
    message += `Looks like this might be an issue with ${info.name};\n`
    message += `Please report it at ${info.bugs.url}`
  }

  console.error(message)

}

process.on('uncaughtException', (error) => {
  const code = typeof error.code === 'number' ?
    (error.code || 1) : 1
  showError(error, true, true)
  process.exit(code)
})

let argv = process.argv.slice(2)

if( argv.includes('--help') || argv.includes('-h') ) {
  console.log(USAGE)
  process.exit(0)
}

if( argv.includes('--version') || argv.includes('-v') ) {
  console.log(info.version)
  process.exit(0)
}

const options = {
  appId: process.env['APP_ID'],
  image: process.env['IMAGE'],
  apiToken: process.env['API_TOKEN'],
  apiKey: process.env['API_KEY'],
  apiHost: process.env['API_HOST'],
  registryHost: process.env['REGISTRY_HOST'],
}

while( argv.length ) {
  switch( argv.shift() ) {
    case '--app': options.appId = argv.shift(); break
    case '--img': options.image = argv.shift(); break
    case '--api-token': options.apiToken = argv.shift(); break
    case '--api-key': options.apiKey = argv.shift(); break
    case '--api-host': options.apiHost = argv.shift(); break
    case '--registry': options.registryHost = argv.shift(); break
  }
}

// Show usage help if no options have been set
if( !(options.appId || options.image || options.apiToken || options.apiKey) ) {
  console.error(USAGE)
  process.exit(1)
}

const preload = require('..')

console.error('\nBuilding preloader image...\n')

preload.build({ stdio: 'inherit' }).once('exit', (code, signal) => {

  if(code !== 0) {
    const error = new Error(`Preloader build exited with ${code == null ? 'signal' : 'code'} ${code == null ? signal : code}`)
    error.code = code
    error.signal = signal
    showError( error )
    process.exit( code || 1 )
  }

  console.error('\nPreloading...\n')

  preload.run(options, { stdio: 'inherit' }).once('exit', (code, signal) => {

    if(code !== 0 || signal != null) {
      const error = new Error(`Preloader exited with ${code == null ? 'signal' : 'code'} ${code == null ? signal : code}`)
      error.code = code
      error.signal = signal
      showError( error )
      process.exit( code || 1 )
    }

    console.log('\n[OK] Done.')

  })

})
